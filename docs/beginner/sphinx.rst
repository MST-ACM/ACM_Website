=======================
Documenting with Sphinx
=======================
---------------
What is Sphinx?
---------------
`Sphinx`_ is an idiomatic Python documentation tool which generates project
documentation using the reStructuredText markup language. Originally, it was
created for Python's official documentation; however, it is very useful for a
variety of projects and languages. This entire documentation is generated using
Sphinx. 

Checkout the `Sphinx`_ website for more information.

--------------------------
Building the Documentation
--------------------------
Sphinx allows you to build the documentation in a variety of formats including:
html, LaTeX, manual pages, etc. This section will focus on building an HTML
version of the documentation, but the steps are the same for the other formats.

1. Clone the Repository. See :ref:`Cloning the Repository <overview-clone-repo>` 
   in :doc:`environment` for more information.
2. Download the necessary Python dependencies::

    # From the root directory of the git repository
    pip3 install --upgrade -r dependencies/requirements.txt

3. Navigate to the ``docs`` directory::

    # From the root directory of the git repository
    cd docs
4. Run the Makefile::

     make html
5. Open your favorite web browser and browse to the generated ``index.html``.
   For example, the url on Firefox would be
   file:///home/kschoon/git-local/acm.mst.edu/docs/_build/html/index.html.
     
----------------
reStructuredText
----------------
In order for documentation to be generated by Sphinx, it must be written using
the reStructuredText markup language. There are a variety of resources already
available about learning reStructuredText so please take some time to look at
the resources below.

For a quick primer for using reStructuredText, please see the `reStructuredText
Primer`_.

For a specification of the complete reStructuredText syntax, please see the
`reStructuredText Specification`_.

To look at how a specific page is made in this documentation, click on the
``View page source`` button on the top right.

---------------------
In-code Documentation
---------------------
One of Sphinx's most powerful features is to auto-document code based on the
Python documentation feature ``docstrings``. Module, class, and function
``docstrings`` can be automatically extracted and formatted from pre-existing
code which makes documentation changes as easy as modifying the ``docstring``.
The ``docstrings`` also support all of the reStructuredText features found in
the `reStructuredText Specification`_. 

In this section, you will learn how to style these various ``docstrings`` to
provide a consistent style for the SIG.com Python projects.

Function Docstrings
-------------------
.. code-block:: python
    
    def foobar(foo, bar):
        """
        Performs an addition operation on the two parameters.

        :param foo: A value to be added.
        :type foo: int
        :param bar: A value to be added.
        :type bar: int

        :returns: The sum of adding ``foo`` and ``bar``.
        :rtype: int

        :raises TypeError: If either foo or bar is not of type integer.
        """
        if not isinstance(int, foo) or not isinstance(int, bar):
            raise TypeError

        return foo + bar

The example above exemplifies the majority of situations a developer may
experience when documenting a function. For each section of the ``docstring``
there are a couple of rules to keep in mind:

Description
    The first section of the ``docstring``, the description,
    should always start with a very that describes the action which the function
    performs. Avoid using phrases such as "This function does" or "This is a
    function that".
``param`` and ``type`` keywords
    For each parameter in the function, there must exist a pair of ``param``
    and ``type`` keywords in the format shown in the example. These pairs
    should be in order from leftmost parameter to rightmost parameter. The
    ``param`` keyword always ends with a period. The ``type`` keyword must be
    of "primitive" Python type or exact import reference. "Primitive" Python
    types look like ``str``, ``int``, ``dict``, ``set``, etc. Exact import
    reference would be like you are importing the class or type in the file
    ``myproject.MyClassName``.
``returns`` and ``rtype`` keywords
    This section follows the ``param`` and ``type`` keyword section. The
    ``returns`` keyword always ends with a period. ``rtype`` follows the same
    rules as the ``type`` keyword of "primitive" Python type or exact import
    reference.
``raises``
    This section must always end in a period. Normally it is best to express the
    condition in which the Exception is raised using "If x".
    
Class Docstrings
-------------------
Currently, there is no Class ``docstring`` style. Please use the ``docstring``
description to adequately describe the purpose and function of the class.

Module Docstrings
-------------------
Currently, there is no Module ``dostring`` style. Please use the ``docstring``
description to adequately describe the purpose and function of the module.


.. _Sphinx: http://www.sphinx-doc.org/en/stable/
.. _reStructuredText Specification: http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html
.. _reStructuredText Primer: http://www.sphinx-doc.org/en/stable/rest.html
